// Enhanced Function Router Architecture for Decision Aid Analysis
// Provides standardized routing, configuration, and fallback mechanisms

// Use centralized environment configuration
import { env, EnvironmentVariables } from '../config/environment';

export interface FunctionConfig {
  name: string;
  timeout: number;
  maxRetries: number;
  priority: number;
  requiresAuth: boolean;
  supportedFeatures: string[];
}

export interface AnalysisRequest {
  content: string;
  maxInsights?: number;
  outputScores?: boolean;
  chunkSize?: number;
}

export interface AnalysisResponse {
  insights: any[];
  criteria?: any[];
  summary?: any;
  meta: {
    source: 'assistants' | 'openai' | 'local';
    version?: string;
    fallback?: boolean;
    functionUsed: string;
    executionTime: number;
    retryCount?: number;
  };
}

// Standardized function configurations with environment-aware timeouts
export const FUNCTION_CONFIGS: Record<string, FunctionConfig> = {
  'analyze-assistant': {
    name: 'analyze-assistant',
    timeout: 45000, // 45 seconds - Assistant API is slow
    maxRetries: 1, // Reduce retries for slow function
    priority: 2, // Lower priority due to JSON structure issues
    requiresAuth: true,
    supportedFeatures: ['assistant-api', 'complex-reasoning', 'hebrew', 'evidence-extraction']
  },
  'analyze-openai': {
    name: 'analyze-openai',
    timeout: 30000, // 30 seconds - Chat API is faster
    maxRetries: 2, // Moderate retries
    priority: 1, // Highest priority - returns proper criterionIds
    requiresAuth: true,
    supportedFeatures: ['chat-completions', 'fast-response', 'hebrew', 'json-mode']
  },
  'local-analysis': {
    name: 'local-analysis',
    timeout: 5000, // 5 seconds - local processing
    maxRetries: 0,
    priority: 3, // Lowest priority (fallback)
    requiresAuth: false,
    supportedFeatures: ['offline', 'keyword-matching', 'basic-insights']
  }
};

export interface EnvironmentConfig {
  hasOpenAiKey: boolean;
  hasAssistantId: boolean;
  hasSupabaseUrl: boolean;
  hasSupabaseKey: boolean;
  localFunctionsUrl?: string;
}

export function getEnvironmentConfig(): EnvironmentConfig {
  return {
    hasOpenAiKey: !!env.openai.apiKey,
    hasAssistantId: !!env.openai.assistantId,
    hasSupabaseUrl: !!env.supabase.url,
    hasSupabaseKey: !!env.supabase.anonKey,
    localFunctionsUrl: env.development.functionsUrl || undefined
  };
}

// Smart function selection based on environment and requirements
export function selectOptimalFunction(request: AnalysisRequest, envConfig: EnvironmentConfig): string[] {
  const isLongContent = request.content.length > 4000;
  const needsComplexReasoning = isLongContent || (request.maxInsights || 0) > 16;
  
  const availableFunctions: string[] = [];
  
  // Check analyze-assistant availability and suitability
  if (envConfig.hasOpenAiKey && envConfig.hasAssistantId && needsComplexReasoning) {
    availableFunctions.push('analyze-assistant');
  }
  
  // Check analyze-openai availability
  if (envConfig.hasOpenAiKey) {
    availableFunctions.push('analyze-openai');
  }
  
  // Local analysis is always available as fallback
  availableFunctions.push('local-analysis');
  
  // Sort by priority (lower number = higher priority)
  return availableFunctions.sort((a, b) => {
    const priorityA = FUNCTION_CONFIGS[a]?.priority || 999;
    const priorityB = FUNCTION_CONFIGS[b]?.priority || 999;
    return priorityA - priorityB;
  });
}

// Standardized error types
export class FunctionRouterError extends Error {
  constructor(
    public functionName: string,
    public originalError: Error,
    public retryCount: number = 0
  ) {
    super(`Function ${functionName} failed: ${originalError.message}`);
    this.name = 'FunctionRouterError';
  }
}

// Execution metrics for monitoring
export interface ExecutionMetrics {
  functionName: string;
  startTime: number;
  endTime: number;
  success: boolean;
  error?: string;
  retryCount: number;
}

export class FunctionRouter {
  private metrics: ExecutionMetrics[] = [];
  private envConfig: EnvironmentConfig;
  private supabaseClient: any = null;
  
  constructor(supabaseClient?: any) {
    this.envConfig = getEnvironmentConfig();
    this.supabaseClient = supabaseClient;
    
    // Only log initialization in development or when debug is enabled
    if (env.isDevelopment || env.features.debugLogging || env.analysis.enableRouterDebug) {
      console.log('üîß FunctionRouter initialized with config:', {
        hasOpenAi: this.envConfig.hasOpenAiKey,
        hasAssistant: this.envConfig.hasAssistantId,
        hasSupabase: this.envConfig.hasSupabaseUrl && this.envConfig.hasSupabaseKey,
        localUrl: this.envConfig.localFunctionsUrl || 'none',
        timeouts: {
          assistant: FUNCTION_CONFIGS['analyze-assistant'].timeout,
          openai: FUNCTION_CONFIGS['analyze-openai'].timeout,
          router: env.router.timeoutMs
        },
        retries: {
          assistant: FUNCTION_CONFIGS['analyze-assistant'].maxRetries,
          openai: FUNCTION_CONFIGS['analyze-openai'].maxRetries,
          router: env.router.retryAttempts
        }
      });
    }
  }
  
  // Get execution metrics for monitoring
  public getMetrics(): ExecutionMetrics[] {
    return [...this.metrics];
  }
  
  // Clear metrics (for testing or reset)
  public clearMetrics(): void {
    this.metrics = [];
  }
  
  // Enhanced routing with standardized error handling and metrics
  public async executeAnalysis(request: AnalysisRequest): Promise<AnalysisResponse> {
    const startTime = Date.now();
    const selectedFunctions = selectOptimalFunction(request, this.envConfig);
    
    console.log(`üéØ Function selection for content (${request.content.length} chars):`, selectedFunctions);
    
    let lastError: Error | null = null;
    let retryCount = 0;
    
    for (const functionName of selectedFunctions) {
      const config = FUNCTION_CONFIGS[functionName];
      if (!config) {
        console.warn(`‚ö†Ô∏è Unknown function configuration: ${functionName}`);
        continue;
      }
      
      for (let attempt = 0; attempt <= config.maxRetries; attempt++) {
        const attemptStart = Date.now();
        retryCount = attempt;
        
        try {
          // Capture function name in closure to prevent any potential issues
          const currentFunctionName = functionName;
          console.log(`üöÄ Executing ${currentFunctionName} (attempt ${attempt + 1}/${config.maxRetries + 1})`);
          console.log(`üéØ Function to execute: "${currentFunctionName}" with timeout: ${config.timeout}ms`);
          
          let result: any;
          
          if (currentFunctionName === 'local-analysis') {
            // Local analysis doesn't need network calls
            console.log(`üè† Executing local analysis (no network call needed)`);
            result = await this.executeLocalAnalysis(request);
          } else {
            // Remote function call with timeout
            console.log(`üåê Executing remote function: ${currentFunctionName}`);
            result = await Promise.race([
              this.executeRemoteFunction(currentFunctionName, request),
              new Promise((_, reject) => 
                setTimeout(() => reject(new Error(`Function ${currentFunctionName} timeout`)), config.timeout)
              )
            ]);
          }
          
          // Standardize the response format
          const standardizedResult: AnalysisResponse = {
            insights: Array.isArray(result?.insights) ? result.insights : [],
            criteria: Array.isArray(result?.criteria) ? result.criteria : undefined,
            summary: result?.summary || null,
            meta: {
              source: result?.meta?.source || (functionName === 'local-analysis' ? 'local' : 'openai'),
              version: result?.meta?.version || `router-v1.0-${functionName}`,
              fallback: selectedFunctions.indexOf(functionName) > 0,
              functionUsed: functionName,
              executionTime: Date.now() - attemptStart,
              retryCount: attempt
            }
          };
          
          // Record success metrics
          this.metrics.push({
            functionName,
            startTime: attemptStart,
            endTime: Date.now(),
            success: true,
            retryCount: attempt
          });
          
          console.log(`‚úÖ ${functionName} succeeded on attempt ${attempt + 1}, execution time: ${standardizedResult.meta.executionTime}ms`);
          return standardizedResult;
          
        } catch (error) {
          const executionTime = Date.now() - attemptStart;
          lastError = error as Error;
          
          // Record failure metrics
          this.metrics.push({
            functionName,
            startTime: attemptStart,
            endTime: Date.now(),
            success: false,
            error: lastError.message,
            retryCount: attempt
          });
          
          // Provide more specific error messages
          const errorType = lastError.message.includes('timeout') ? 'timeout' : 
                          lastError.message.includes('500') ? 'server error' :
                          lastError.message.includes('401') ? 'authentication' :
                          lastError.message.includes('404') ? 'not found' : 'error';
          
          console.warn(`‚ùå ${functionName} failed on attempt ${attempt + 1}: ${errorType} - ${lastError.message}`);
          
          // Don't retry if it's the last attempt for this function
          if (attempt >= config.maxRetries) {
            console.warn(`üö´ ${functionName} exhausted all ${config.maxRetries + 1} attempts`);
            break;
          }
          
          // Wait before retry (exponential backoff with configured factor)
          if (attempt < config.maxRetries) {
            const baseDelayMs = 1000;
            const backoffMs = Math.min(
              baseDelayMs * Math.pow(env.router.backoffFactor, attempt), 
              5000
            );
            
            if (env.analysis.enableRouterDebug) {
              console.log(`‚è≥ Waiting ${backoffMs}ms before retry (backoff factor: ${env.router.backoffFactor})...`);
            }
            await new Promise(resolve => setTimeout(resolve, backoffMs));
          }
        }
      }
    }
    
    // All functions failed
    const totalTime = Date.now() - startTime;
    console.error(`üí• All functions failed after ${totalTime}ms. Last error:`, lastError);
    
    // Provide a helpful error message in Hebrew
    const userMessage = lastError?.message.includes('timeout') ? 
      '◊ñ◊û◊ü ◊î◊†◊ô◊™◊ï◊ó ◊ó◊®◊í ◊û◊î◊û◊ï◊™◊®. ◊ê◊†◊ê ◊†◊°◊ï ◊¢◊ù ◊ò◊ß◊°◊ò ◊ß◊¶◊® ◊ô◊ï◊™◊®.' :
      lastError?.message.includes('500') ?
      '◊©◊í◊ô◊ê◊™ ◊©◊®◊™ ◊ñ◊û◊†◊ô◊™. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊ï◊ë ◊ë◊¢◊ï◊ì ◊û◊°◊§◊® ◊ì◊ß◊ï◊™.' :
      '◊ú◊ê ◊î◊¶◊ú◊ó◊†◊ï ◊ú◊†◊™◊ó ◊ê◊™ ◊î◊û◊°◊û◊ö. ◊ê◊†◊ê ◊ï◊ï◊ì◊ê◊ï ◊©◊î◊û◊°◊û◊ö ◊û◊õ◊ô◊ú ◊ò◊ß◊°◊ò ◊™◊ß◊ô◊ü.';
    
    throw new FunctionRouterError(
      selectedFunctions.join(' -> '), 
      new Error(userMessage + ` (${lastError?.message || 'Unknown error'})`),
      retryCount
    );
  }
  
  private async executeRemoteFunction(functionName: string, request: AnalysisRequest): Promise<any> {
    console.log(`üîç executeRemoteFunction called with functionName: "${functionName}"`);
    console.log(`üîç Function name type: ${typeof functionName}, value: "${functionName}"`);
    
    // Use local functions URL if available, otherwise use Supabase
    if (this.envConfig.localFunctionsUrl) {
      const url = `${this.envConfig.localFunctionsUrl}/functions/v1/${functionName}`;
      console.log(`üì° Constructed URL: ${url}`);
      console.log(`üì° About to fetch: ${url} with method POST`);
      
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(request)
      });
      
      console.log(`üì° Response received from ${url}: status ${response.status}`);
      
      if (!response.ok) {
        console.error(`‚ùå Function ${functionName} at ${url} returned HTTP ${response.status}`);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      console.log(`‚úÖ Function ${functionName} at ${url} responded successfully`);
      return await response.json();
    } else if (this.supabaseClient) {
      // Use provided Supabase client
      console.log(`üîç Using Supabase client for function: "${functionName}"`);
      console.log(`üì° Calling Supabase function: ${functionName}`);
      
      const { data, error } = await this.supabaseClient.functions.invoke(functionName, {
        body: request
      });
      
      if (error) {
        console.error(`‚ùå Supabase function ${functionName} error:`, error.message);
        throw new Error(`Supabase function error: ${error.message}`);
      }
      
      console.log(`‚úÖ Supabase function ${functionName} responded successfully`);
      return data;
    } else {
      throw new Error('No execution method available - provide either localFunctionsUrl or supabaseClient');
    }
  }
  
  private async executeLocalAnalysis(request: AnalysisRequest): Promise<any> {
    // Enhanced Hebrew government decision analysis
    const content = request.content;
    const maxInsights = request.maxInsights || 6;
    
    const rules = [
      {
        criterionId: "timeline",
        terms: ["◊™◊ê◊®◊ô◊ö", "◊ì◊ì-◊ú◊ô◊ô◊ü", "◊¢◊ì", "◊™◊ï◊ö", "◊ô◊û◊ô◊ù", "◊©◊ë◊ï◊¢◊ï◊™", "◊ó◊ï◊ì◊©◊ô◊ù", "◊ú◊ï◊ó ◊ñ◊û◊†◊ô◊ù", "◊û◊ï◊¢◊ì", "◊©◊ú◊ë", "◊©◊†◊™◊ô◊™", "◊®◊ë◊¢◊ï◊†◊ô", "◊ó◊ï◊ì◊©◊ô"],
        patterns: ["\\d{4}", "\\d{1,2}\\s*◊ë[◊ê-◊™]+", "◊©◊ú◊ë\\s*[◊ê-◊™]", "◊¢◊ì\\s*\\d"],
        explanation: "◊†◊ì◊®◊© ◊ú◊ï◊ï◊ì◊ê ◊ú◊ï◊ó◊ï◊™ ◊ñ◊û◊†◊ô◊ù ◊û◊ó◊ô◊ô◊ë◊ô◊ù ◊ï◊ë◊î◊ô◊®◊ô◊ù ◊ú◊ë◊ô◊¶◊ï◊¢.",
        suggestion: "◊î◊ï◊°◊ô◊§◊ï ◊™◊ê◊®◊ô◊õ◊ô◊ù ◊û◊ó◊ô◊ô◊ë◊ô◊ù ◊ú◊õ◊ú ◊û◊©◊ô◊û◊î, ◊ê◊ë◊†◊ô ◊ì◊®◊ö ◊ë◊®◊ï◊®◊ï◊™, ◊ï◊î◊í◊ì◊ô◊®◊ï ◊û◊î ◊ß◊ï◊®◊î ◊ë◊ê◊ô-◊¢◊û◊ô◊ì◊î ◊ë◊ú◊ï◊ó◊ï◊™ ◊î◊ñ◊û◊†◊ô◊ù.",
      },
      {
        criterionId: "resources",
        terms: ["◊™◊ß◊¶◊ô◊ë", "◊¢◊ú◊ï◊™", "◊û◊ô◊û◊ï◊ü", "◊î◊ï◊¶◊ê◊î", "◊©\"◊ó", "◊õ◊°◊§◊ô◊ù", "◊û◊©◊ê◊ë◊ô◊ù", "◊õ◊ï◊ó ◊ê◊ì◊ù", "◊û◊ô◊ú◊ô◊ï◊ü", "◊ê◊ú◊£", "◊î◊ß◊¶◊ê◊î"],
        patterns: ["\\d+\\s*◊û◊ô◊ú◊ô◊ï◊ü", "\\d+\\s*◊ê◊ú◊£", "\\d+\\%", "◊©\"◊ó"],
        explanation: "◊†◊ì◊®◊©◊™ ◊î◊¢◊®◊õ◊î ◊™◊ß◊¶◊ô◊ë◊ô◊™ ◊û◊§◊ï◊®◊ò◊™ ◊ï◊î◊í◊ì◊®◊™ ◊û◊ß◊ï◊®◊ï◊™ ◊û◊ô◊û◊ï◊ü.",
        suggestion: "◊î◊ï◊°◊ô◊§◊ï ◊§◊ô◊®◊ï◊ò ◊û◊ú◊ê ◊©◊ú ◊¢◊ú◊ï◊ô◊ï◊™, ◊û◊ß◊ï◊®◊ï◊™ ◊û◊ô◊û◊ï◊ü ◊û◊ê◊ï◊©◊®◊ô◊ù, ◊õ◊ï◊ó ◊ê◊ì◊ù ◊†◊ì◊®◊© ◊ï◊û◊†◊í◊†◊ï◊ü ◊ë◊ß◊®◊™ ◊™◊ß◊¶◊ô◊ë.",
      },
      {
        criterionId: "cross_sector",
        terms: ["◊¶◊ô◊ë◊ï◊®", "◊ë◊¢◊ú◊ô ◊¢◊†◊ô◊ô◊ü", "◊¢◊û◊ï◊™", "◊ó◊ë◊®◊î ◊ê◊ñ◊®◊ó◊ô◊™", "◊û◊©◊®◊ì◊ô◊ù", "◊®◊©◊ï◊ô◊ï◊™", "◊©◊ô◊™◊ï◊£", "◊™◊ô◊ê◊ï◊ù", "◊ë◊ô◊ü-◊û◊©◊®◊ì◊ô"],
        patterns: ["◊û◊©◊®◊ì\\s+[◊ê-◊™]+", "◊®◊©◊ï◊™\\s+[◊ê-◊™]+", "◊ï◊¢◊ì◊™\\s+[◊ê-◊™]+"],
        explanation: "◊ô◊© ◊ú◊î◊™◊ó◊©◊ë ◊ë◊ë◊¢◊ú◊ô ◊¢◊†◊ô◊ô◊ü ◊ï◊ë◊¶◊ï◊®◊ö ◊ë◊©◊ô◊™◊ï◊§◊ô ◊§◊¢◊ï◊ú◊î ◊ë◊ô◊ü-◊û◊í◊ñ◊®◊ô◊ô◊ù.",
        suggestion: "◊î◊ï◊°◊ô◊§◊ï ◊û◊†◊í◊†◊ï◊ü ◊©◊ô◊™◊ï◊£ ◊¶◊ô◊ë◊ï◊® ◊û◊™◊ï◊¢◊ì, ◊™◊ô◊ê◊ï◊ù ◊ë◊ô◊ü-◊û◊©◊®◊ì◊ô ◊û◊ï◊ë◊†◊î, ◊ï◊û◊¢◊ï◊®◊ë◊ï◊™ ◊ë◊¢◊ú◊ô ◊¢◊†◊ô◊ô◊ü ◊®◊ú◊ï◊ï◊†◊ò◊ô◊ô◊ù.",
      },
      {
        criterionId: "evaluation",
        terms: ["◊î◊¢◊®◊õ◊î", "◊û◊ì◊ì◊ô", "◊ë◊ô◊ß◊ï◊®◊™", "◊ì◊ô◊ï◊ï◊ó", "◊û◊¢◊ß◊ë", "◊©◊ë◊ô◊¢◊ï◊™ ◊®◊¶◊ï◊ü", "◊î◊¶◊ú◊ó◊î", "◊ô◊¢◊ô◊ú◊ï◊™", "◊î◊©◊§◊¢◊î"],
        patterns: ["\\d+\\%\\s*◊©◊ô◊§◊ï◊®", "◊û◊ì◊ì\\s+[◊ê-◊™]+", "◊ë◊ô◊ß◊ï◊®◊™\\s+[◊ê-◊™]+"],
        explanation: "◊†◊ì◊®◊©◊ô◊ù ◊û◊ì◊ì◊ô ◊î◊¢◊®◊õ◊î ◊ë◊®◊ï◊®◊ô◊ù ◊ï◊û◊†◊í◊†◊ï◊ü ◊û◊¢◊ß◊ë ◊©◊ô◊ò◊™◊ô.",
        suggestion: "◊î◊í◊ì◊ô◊®◊ï ◊û◊ì◊ì◊ô ◊™◊ï◊¶◊ê◊î ◊õ◊û◊ï◊™◊ô◊ô◊ù ◊ï◊ë◊®◊ï◊®◊ô◊ù, ◊û◊†◊í◊†◊ï◊ü ◊ë◊ô◊ß◊ï◊®◊™ ◊¢◊¶◊û◊ê◊ô, ◊ï◊ú◊ï◊ó◊ï◊™ ◊ñ◊û◊†◊ô◊ù ◊ú◊ì◊ô◊ï◊ï◊ó ◊ï◊î◊¢◊®◊õ◊î.",
      },
      {
        criterionId: "reporting",
        terms: ["◊ì◊ô◊ï◊ï◊ó", "◊§◊®◊°◊ï◊ù", "◊ì◊ï◊ó", "◊¢◊ì◊õ◊ï◊ü", "◊û◊ô◊ì◊¢", "◊©◊ß◊ô◊§◊ï◊™", "◊ó◊©◊ô◊§◊î", "◊§◊®◊ò◊ô◊ù"],
        patterns: ["◊ì◊ô◊ï◊ï◊ó\\s+[◊ê-◊™]+", "◊ì◊ï◊ó\\s+[◊ê-◊™]+", "◊§◊®◊°◊ï◊ù\\s+[◊ê-◊™]+"],
        explanation: "◊†◊ì◊®◊© ◊û◊†◊í◊†◊ï◊ü ◊ì◊ô◊ï◊ï◊ó ◊©◊ß◊ï◊£ ◊ï◊û◊ï◊ë◊†◊î.",
        suggestion: "◊î◊ß◊ô◊û◊ï ◊û◊¢◊®◊õ◊™ ◊ì◊ô◊ï◊ï◊ó ◊°◊ì◊ô◊®◊î ◊¢◊ù ◊§◊ï◊®◊û◊ò ◊ê◊ó◊ô◊ì, ◊™◊ì◊ô◊®◊ï◊™ ◊ß◊ë◊ï◊¢◊î ◊ï◊§◊®◊°◊ï◊ù ◊§◊™◊ï◊ó ◊ú◊¶◊ô◊ë◊ï◊®.",
      },
      {
        criterionId: "external_audit",
        terms: ["◊ë◊ô◊ß◊ï◊®◊™ ◊ó◊ô◊¶◊ï◊†◊ô◊™", "◊û◊ë◊ß◊®", "◊ê◊ô◊©◊ï◊®", "◊ï◊ô◊ì◊ï◊ê", "◊§◊ô◊ß◊ï◊ó", "◊ë◊ß◊®◊î", "◊ë◊ô◊ß◊ï◊®◊™"],
        patterns: ["◊û◊ë◊ß◊®\\s+[◊ê-◊™]+", "◊ë◊ô◊ß◊ï◊®◊™\\s+[◊ê-◊™]+", "◊§◊ô◊ß◊ï◊ó\\s+[◊ê-◊™]+"],
        explanation: "◊†◊ì◊®◊©◊™ ◊ë◊ô◊ß◊ï◊®◊™ ◊ó◊ô◊¶◊ï◊†◊ô◊™ ◊¢◊¶◊û◊ê◊ô◊™ ◊ï◊û◊ß◊¶◊ï◊¢◊ô◊™.",
        suggestion: "◊û◊†◊ï ◊í◊ï◊®◊ù ◊ë◊ô◊ß◊ï◊®◊™ ◊ó◊ô◊¶◊ï◊†◊ô ◊û◊ï◊°◊û◊ö, ◊ß◊ë◊¢◊ï ◊™◊ì◊ô◊®◊ï◊™ ◊ë◊ì◊ô◊ß◊ï◊™ ◊ï◊ó◊ï◊ë◊™ ◊§◊®◊°◊ï◊ù ◊û◊û◊¶◊ê◊ô◊ù.",
      },
      {
        criterionId: "multi_levels",
        terms: ["◊®◊û◊ï◊™", "◊ì◊®◊í◊ô◊ù", "◊î◊ô◊®◊®◊õ◊ô◊î", "◊û◊†◊î◊ú◊ô◊ù", "◊§◊ß◊ô◊ì◊ô◊ù", "◊ë◊õ◊ô◊®◊ô◊ù", "◊ñ◊ï◊ò◊®◊ô◊ù", "◊™◊ô◊ê◊ï◊ù"],
        patterns: ["◊®◊û◊™\\s+[◊ê-◊™]+", "◊ì◊®◊í\\s+[◊ê-◊™]+", "◊û◊†◊î◊ú\\s+[◊ê-◊™]+"],
        explanation: "◊†◊ì◊®◊© ◊™◊ô◊ê◊ï◊ù ◊ô◊¢◊ô◊ú ◊ë◊ô◊ü ◊î◊®◊û◊ï◊™ ◊î◊ê◊®◊í◊ï◊†◊ô◊ï◊™ ◊î◊©◊ï◊†◊ï◊™.",
        suggestion: "◊î◊ë◊î◊ô◊®◊ï ◊ê◊™ ◊ó◊ú◊ï◊ß◊™ ◊î◊ê◊ó◊®◊ô◊ï◊™ ◊ë◊ô◊ü ◊î◊ì◊®◊í◊ô◊ù ◊ï◊¶◊®◊ï ◊û◊†◊í◊†◊ï◊†◊ô ◊™◊ô◊ê◊ï◊ù ◊ï◊™◊ß◊©◊ï◊®◊™ ◊ë◊®◊ï◊®◊ô◊ù.",
      },
      {
        criterionId: "structure",
        terms: ["◊û◊ë◊†◊î", "◊ê◊®◊í◊ï◊ü", "◊ó◊ú◊ï◊ß◊î", "◊™◊§◊ß◊ô◊ì◊ô◊ù", "◊ê◊ó◊®◊ô◊ï◊™", "◊°◊û◊õ◊ï◊™", "◊î◊ô◊®◊®◊õ◊ô◊î", "◊û◊†◊î◊ú ◊§◊®◊ï◊ô◊ß◊ò"],
        patterns: ["◊û◊†◊î◊ú\\s+[◊ê-◊™]+", "◊ê◊ó◊®◊ê◊ô\\s+[◊ê-◊™]+", "◊¶◊ï◊ï◊™\\s+[◊ê-◊™]+"],
        explanation: "◊†◊ì◊®◊© ◊û◊ë◊†◊î ◊ê◊®◊í◊ï◊†◊ô ◊ë◊®◊ï◊® ◊¢◊ù ◊î◊í◊ì◊®◊™ ◊™◊§◊ß◊ô◊ì◊ô◊ù.",
        suggestion: "◊ó◊ú◊ß◊ï ◊ê◊™ ◊î◊™◊ï◊õ◊†◊ô◊™ ◊ú◊û◊©◊ô◊û◊ï◊™ ◊°◊§◊¶◊ô◊§◊ô◊ï◊™ ◊¢◊ù ◊ë◊¢◊ú◊ô ◊™◊§◊ß◊ô◊ì◊ô◊ù ◊û◊ï◊í◊ì◊®◊ô◊ù, ◊°◊û◊õ◊ï◊ô◊ï◊™ ◊ë◊®◊ï◊®◊ï◊™ ◊ï◊ê◊ë◊†◊ô ◊ì◊®◊ö.",
      },
      {
        criterionId: "field_implementation",
        terms: ["◊ô◊ô◊©◊ï◊ù", "◊ë◊ô◊¶◊ï◊¢", "◊©◊ò◊ó", "◊û◊ë◊¶◊¢◊ô◊ù", "◊î◊§◊¢◊ú◊î", "◊î◊ò◊û◊¢◊î", "◊û◊ô◊û◊ï◊©", "◊ô◊ô◊©◊ï◊ù ◊ë◊§◊ï◊¢◊ú"],
        patterns: ["◊ô◊ô◊©◊ï◊ù\\s+[◊ê-◊™]+", "◊ë◊ô◊¶◊ï◊¢\\s+[◊ê-◊™]+", "◊î◊ò◊û◊¢◊î\\s+[◊ê-◊™]+"],
        explanation: "◊†◊ì◊®◊© ◊™◊ô◊ê◊ï◊® ◊û◊§◊ï◊®◊ò ◊©◊ú ◊î◊ô◊ô◊©◊ï◊ù ◊ë◊§◊ï◊¢◊ú ◊ë◊©◊ò◊ó.",
        suggestion: "◊§◊®◊ò◊ï ◊ê◊™ ◊™◊î◊ú◊ô◊õ◊ô ◊î◊ô◊ô◊©◊ï◊ù ◊ë◊©◊ò◊ó: ◊û◊ô ◊û◊ë◊¶◊¢, ◊ê◊ô◊ö, ◊ë◊ê◊ô◊ú◊ï ◊õ◊ú◊ô◊ù ◊ï◊°◊û◊õ◊ï◊ô◊ï◊™, ◊ï◊û◊î ◊û◊†◊í◊†◊ï◊ü ◊î◊§◊ô◊ß◊ï◊ó.",
      },
      {
        criterionId: "arbitrator",
        terms: ["◊û◊õ◊®◊ô◊¢", "◊î◊ó◊ú◊ò◊î", "◊§◊™◊®◊ï◊ü ◊°◊õ◊°◊ï◊õ◊ô◊ù", "◊ë◊ï◊®◊®◊ï◊™", "◊î◊õ◊®◊¢◊î", "◊°◊û◊õ◊ï◊™ ◊î◊õ◊®◊¢◊î"],
        patterns: ["◊í◊ï◊®◊ù ◊û◊õ◊®◊ô◊¢", "◊°◊û◊õ◊ï◊™\\s+[◊ê-◊™]+", "◊î◊õ◊®◊¢◊î\\s+[◊ê-◊™]+"],
        explanation: "◊†◊ì◊®◊© ◊û◊†◊í◊†◊ï◊ü ◊î◊õ◊®◊¢◊î ◊ú◊ß◊ë◊ú◊™ ◊î◊ó◊ú◊ò◊ï◊™ ◊ï◊§◊™◊®◊ï◊ü ◊ó◊°◊ô◊û◊ï◊™.",
        suggestion: "◊û◊†◊ï ◊í◊ï◊®◊ù ◊û◊õ◊®◊ô◊¢ ◊¢◊ù ◊°◊û◊õ◊ï◊™ ◊ë◊®◊ï◊®◊î, ◊ñ◊û◊ü ◊™◊í◊ï◊ë◊î ◊û◊ï◊í◊ì◊® ◊ï◊†◊î◊ú◊ô ◊î◊°◊ú◊û◊î ◊ú◊û◊ß◊®◊ô◊ù ◊û◊ï◊®◊õ◊ë◊ô◊ù.",
      },
      {
        criterionId: "outcomes",
        terms: ["◊™◊ï◊¶◊ê◊ï◊™", "◊î◊©◊í◊ô◊ù", "◊û◊ò◊®◊ï◊™", "◊ô◊¢◊ì◊ô◊ù", "◊î◊ô◊©◊í◊ô◊ù", "◊§◊ú◊ò", "◊™◊§◊ï◊ß◊î", "◊î◊©◊§◊¢◊î"],
        patterns: ["◊ô◊¢◊ì\\s+[◊ê-◊™]+", "◊û◊ò◊®◊î\\s+[◊ê-◊™]+", "◊™◊ï◊¶◊ê◊î\\s+[◊ê-◊™]+"],
        explanation: "◊†◊ì◊®◊©◊™ ◊î◊í◊ì◊®◊î ◊ë◊®◊ï◊®◊î ◊©◊ú ◊î◊™◊ï◊¶◊ê◊ï◊™ ◊î◊¶◊§◊ï◊ô◊ï◊™ ◊ï◊î◊û◊ì◊ô◊ì◊ï◊™.",
        suggestion: "◊î◊í◊ì◊ô◊®◊ï ◊û◊ì◊ì◊ô ◊™◊ï◊¶◊ê◊î ◊ë◊®◊ï◊®◊ô◊ù ◊ï◊†◊ô◊™◊†◊ô◊ù ◊ú◊û◊ì◊ô◊ì◊î, ◊ô◊¢◊ì◊ô ◊î◊¶◊ú◊ó◊î ◊õ◊û◊ï◊™◊ô◊ô◊ù ◊ï◊û◊¢◊®◊õ◊™ ◊û◊¢◊ß◊ë ◊ê◊ó◊® ◊î◊©◊í◊™◊ù.",
      },
      {
        criterionId: "integrator",
        terms: ["◊û◊™◊ê◊ù", "◊û◊™◊õ◊ú◊ú", "◊û◊†◊î◊ú", "◊®◊õ◊ñ", "◊û◊®◊õ◊ñ", "◊™◊ô◊ê◊ï◊ù", "◊ê◊ô◊†◊ò◊í◊®◊¶◊ô◊î", "◊û◊ò◊î"],
        patterns: ["◊û◊†◊î◊ú\\s+[◊ê-◊™]+", "◊û◊™◊ê◊ù\\s+[◊ê-◊™]+", "◊¶◊ï◊ï◊™ ◊û◊™◊õ◊ú◊ú"],
        explanation: "◊†◊ì◊®◊© ◊í◊ï◊®◊ù ◊û◊™◊õ◊ú◊ú ◊ú◊™◊ô◊ê◊ï◊ù ◊ï◊†◊ô◊î◊ï◊ú ◊î◊™◊ï◊õ◊†◊ô◊™.",
        suggestion: "◊î◊í◊ì◊ô◊®◊ï ◊¶◊ï◊ï◊™ ◊û◊™◊õ◊ú◊ú ◊¢◊ù ◊î◊®◊õ◊ë ◊û◊ï◊í◊ì◊®, ◊°◊û◊õ◊ï◊ô◊ï◊™ ◊ë◊®◊ï◊®◊ï◊™ ◊ï◊™◊ì◊ô◊®◊ï◊™ ◊ô◊©◊ô◊ë◊ï◊™ ◊ß◊ë◊ï◊¢◊î ◊ú◊™◊ô◊ê◊ï◊ù.",
      },
    ];
    
    const insights = [];
    const foundMatches = new Set(); // Avoid duplicates
    
    for (const rule of rules) {
      // Check terms
      for (const term of rule.terms) {
        const index = content.indexOf(term);
        if (index >= 0 && insights.length < maxInsights) {
          const matchKey = `${rule.criterionId}-${index}-${term}`;
          if (!foundMatches.has(matchKey)) {
            foundMatches.add(matchKey);
            insights.push({
              id: `local-${rule.criterionId}-${index}`,
              criterionId: rule.criterionId,
              quote: content.slice(Math.max(0, index - 30), Math.min(content.length, index + term.length + 30)),
              explanation: rule.explanation,
              suggestion: rule.suggestion,
              suggestion_primary: rule.suggestion,
              suggestion_secondary: `◊†◊ì◊®◊© ◊§◊ô◊™◊ï◊ó ◊ï◊î◊¢◊û◊ß◊î ◊©◊ú ◊î◊°◊¢◊ô◊£ ${rule.criterionId} ◊¢◊ù ◊§◊ô◊®◊ï◊ò ◊†◊ï◊°◊£ ◊ï◊û◊ì◊ì◊ô◊ù ◊û◊ï◊™◊ê◊û◊ô◊ù`,
              rangeStart: index,
              rangeEnd: index + term.length,
            });
          }
        }
      }
      
      // Check regex patterns if defined
      if (rule.patterns && insights.length < maxInsights) {
        for (const pattern of rule.patterns) {
          try {
            const regex = new RegExp(pattern, 'g');
            let match;
            while ((match = regex.exec(content)) !== null && insights.length < maxInsights) {
              const matchKey = `${rule.criterionId}-${match.index}-pattern`;
              if (!foundMatches.has(matchKey)) {
                foundMatches.add(matchKey);
                insights.push({
                  id: `local-${rule.criterionId}-pattern-${match.index}`,
                  criterionId: rule.criterionId,
                  quote: content.slice(Math.max(0, match.index - 30), Math.min(content.length, match.index + match[0].length + 30)),
                  explanation: `${rule.explanation} ◊†◊û◊¶◊ê ◊ì◊§◊ï◊°: "${match[0]}"`,
                  suggestion: rule.suggestion,
                  suggestion_primary: rule.suggestion,
                  suggestion_secondary: `◊î◊™◊û◊ß◊ì◊ï ◊ë◊§◊ô◊™◊ï◊ó ◊î◊ì◊§◊ï◊° "${match[0]}" ◊ï◊ë◊î◊®◊ó◊ë◊™ ◊î◊î◊ô◊ë◊ò◊ô◊ù ◊î◊ß◊©◊ï◊®◊ô◊ù`,
                  rangeStart: match.index,
                  rangeEnd: match.index + match[0].length,
                });
              }
            }
          } catch (e) {
            // Skip invalid regex patterns
            if (env.features.debugLogging) {
              console.warn(`Invalid regex pattern: ${pattern}`, e);
            }
          }
        }
      }
    }
    
    return {
      insights: insights.slice(0, maxInsights),
      criteria: [],
      summary: {
        feasibilityPercent: 65,
        feasibilityLevel: 'medium' as const,
        reasoning: '◊†◊ô◊™◊ï◊ó ◊û◊ß◊ï◊û◊ô ◊ë◊°◊ô◊°◊ô - ◊†◊ì◊®◊© ◊†◊ô◊™◊ï◊ó ◊û◊™◊ß◊ì◊ù ◊ô◊ï◊™◊®'
      },
      meta: {
        source: 'local' as const,
        version: 'local-router-v1.0'
      }
    };
  }
}

// Factory function to create router instance with Supabase client
export function createFunctionRouter(supabaseClient?: any): FunctionRouter {
  return new FunctionRouter(supabaseClient);
}

// Default instance for legacy compatibility (will use local functions URL only)
export const functionRouter = new FunctionRouter();

// Export for backward compatibility
export { functionRouter as router };